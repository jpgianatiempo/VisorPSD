"Atributo:",
atributos, selected = c("Production","Imports","Exports","Domestic Consumption","Ending Stocks","Stock/Consumo"),
multiple=TRUE, selectize=TRUE)
),
column(3,
selectInput("pais",
"País:",
paises,
selected = as.character("World"),
multiple=TRUE, selectize=TRUE)
),
column(3,
# Copy the line below to make a slider range
sliderInput("mkty", label = h3("Año Comercial"), min = min(as.numeric(psd$Market_Year)),
max = max(as.numeric(psd$Market_Year)), value = c(min(as.numeric(psd$Market_Year)),max(as.numeric(psd$Market_Year)))
)
),
column(3, radioButtons(inputId = "seleccion_tipo_dato",label = "Vista de Datos",
choiceValues = c("valores_absolutos","valores_relativos"),
choiceNames = c("Valores absolutos", "Valores relativos"),
selected ="valores_absolutos",inline = T))),
tabsetPanel(type = "tabs",
tabPanel("Tabla", DT::dataTableOutput("table")),
tabPanel("Gráficos", shinycssloaders::withSpinner(plotlyOutput("Plot"), type = 5) ),
tabPanel("Configuración",
br(),
br(),
radioButtons(inputId = "seleccion_tipo_dato",label = "Vista de Datos",
choiceValues = c("valores_absolutos","valores_relativos"),
choiceNames = c("Valores absolutos", "Valores relativos al total mundial"),
selected ="valores_absolutos",inline = T),
br(),
br(),
actionButton(inputId = "ejecutar",label = "Realizar cambios!"),br()),
tabPanel("Descarga",br(),br(),br(),downloadButton("download", "Descarga")),br(),br(),br()
),
h5("(*) Unidades de referencia:"),
h6("- Yield: tn/ha"),
h6("- Area Harvested: Mha"),
h6("- Extr. Rate, 999.9999: Porcentaje (%)"),
h6("- Stock/Consumo: Porcentaje (%)"),
h6("- Otras Variables: Mtn")
)
# Run the application
shinyApp(ui = ui, server = server)
#genero psd como % world (antes de calcular world)
psdRelativo <-
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel(
h2("Visor PSD-USDA")),
h3(paste0("Datos actualizados ",DatosAl)),
# Create a new Row in the UI for selectInputs
fluidRow(
column(3,
selectInput("com",
"Commodity:",
commodity, selected = "Barley")
),
column(3,
selectInput("atr",
"Atributo:",
atributos, selected = c("Production","Imports","Exports","Domestic Consumption","Ending Stocks","Stock/Consumo"),
multiple=TRUE, selectize=TRUE)
),
column(3,
selectInput("pais",
"País:",
paises,
selected = as.character("World"),
multiple=TRUE, selectize=TRUE)
),
column(3,
# Copy the line below to make a slider range
sliderInput("mkty", label = h3("Año Comercial"), min = min(as.numeric(psd$Market_Year)),
max = max(as.numeric(psd$Market_Year)), value = c(min(as.numeric(psd$Market_Year)),max(as.numeric(psd$Market_Year)))
)
)),
tabsetPanel(type = "tabs",
tabPanel("Tabla", DT::dataTableOutput("table")),
tabPanel("Gráficos", shinycssloaders::withSpinner(plotlyOutput("Plot"), type = 5) ),
tabPanel("Configuración",
br(),
br(),
radioButtons(inputId = "seleccion_tipo_dato",label = "Vista de Datos",
choiceValues = c("valores_absolutos","valores_relativos"),
choiceNames = c("Valores absolutos", "Valores relativos al total mundial"),
selected ="valores_absolutos",inline = T),
br(),
br(),
actionButton(inputId = "ejecutar",label = "Realizar cambios!"),br()),
tabPanel("Descarga",br(),br(),br(),downloadButton("download", "Descarga")),br(),br(),br()
),
h5("(*) Unidades de referencia:"),
h6("- Yield: tn/ha"),
h6("- Area Harvested: Mha"),
h6("- Extr. Rate, 999.9999: Porcentaje (%)"),
h6("- Stock/Consumo: Porcentaje (%)"),
h6("- Otras Variables: Mtn")
)
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
datos_salida <- reactive({
if (input$seleccion_tipo_dato == "valores_absolutos") {
if (input$com != "All") {
psd <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psd <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psd <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psd <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
else {
if (input$com != "All") {
psdRelativo <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psdRelativo <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psdRelativo <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psdRelativo <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
})
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
datos_salida()
}))
output$Plot <- renderPlotly({
p <- ggplot(datos_salida(), aes(x=Market_Year,y=Value,color=Country_Name))+
geom_line()+
facet_wrap(~Attribute_Description, scales = "free_y") +
theme_bw()
p <- ggplotly(p)
p
})
observeEvent(input$ejecutar, {
session$sendCustomMessage(type = 'testmessage',
message ='Cambios realizados!')
})
output$download <- downloadHandler(
filename = function() {
paste("PSD-USDA ", input$com ," ",DatosAl, ".csv", sep="")
},
content = function(file) {
df <- datos_salida()
write.csv(x = df, file = file,fileEncoding = "UTF-8")
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
View(psdRelativo)
server <- function(input, output) {
datos_salida <- reactive({
if (input$seleccion_tipo_dato == "valores_absolutos") {
if (input$com != "All") {
psd <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psd <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psd <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psd <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
if (input$seleccion_tipo_dato == "valores_relativos") {
if (input$com != "All") {
psdRelativo <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psdRelativo <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psdRelativo <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psdRelativo <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
})
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
datos_salida()
}))
output$Plot <- renderPlotly({
p <- ggplot(datos_salida(), aes(x=Market_Year,y=Value,color=Country_Name))+
geom_line()+
facet_wrap(~Attribute_Description, scales = "free_y") +
theme_bw()
p <- ggplotly(p)
p
})
observeEvent(input$ejecutar, {
session$sendCustomMessage(type = 'testmessage',
message ='Cambios realizados!')
})
output$download <- downloadHandler(
filename = function() {
paste("PSD-USDA ", input$com ," ",DatosAl, ".csv", sep="")
},
content = function(file) {
df <- datos_salida()
write.csv(x = df, file = file,fileEncoding = "UTF-8")
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
datos_salida <- reactive({
if (input$seleccion_tipo_dato == "valores_absolutos") {
if (input$com != "All") {
psd <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psd <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psd <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psd <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
else {
if (input$com != "All") {
psdRelativo <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psdRelativo <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psdRelativo <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psdRelativo <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
})
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
datos_salida()
}))
output$Plot <- renderPlotly({
p <- ggplot(datos_salida(), aes(x=Market_Year,y=Value,color=Country_Name))+
geom_line()+
facet_wrap(~Attribute_Description, scales = "free_y") +
theme_bw()
p <- ggplotly(p)
p
})
observeEvent(input$ejecutar, {
session$sendCustomMessage(type = 'testmessage',
message ='Cambios realizados!')
})
output$download <- downloadHandler(
filename = function() {
paste("PSD-USDA ", input$com ," ",DatosAl, ".csv", sep="")
},
content = function(file) {
df <- datos_salida()
write.csv(x = df, file = file,fileEncoding = "UTF-8")
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
`%notin%` <- Negate(`%in%`)
library(shiny)
library(ggplot2)
library(shinythemes)
library(tidyverse)
library(shinycssloaders)
library(scales)
library(plotly)
psdRelativo <- psd %>% filter(Country_Name $notin% c("World","World (sin China)"))
colnames(psd)
# Run the application
shinyApp(ui = ui, server = server)
psdRelativo <- psd %>% filter(Country_Name %notin% c("World","World (sin China)") &
Attribute_Description %notin% c("Stock/Consumo","Extr. Rate, 999.9999","Yield")) %>%
group_by(Commodity_Description, Country_Name, Attribute_Description, Market_Year) %>%
summarise("Value" = Value / sum(Value) * 100)
psdRelativo <- psdRelativo %>% mutate("Unit_Description" = "Porcentaje (%)")
View(psdRelativo)
psdRelativo <- psd %>% filter(Country_Name %notin% c("World","World (sin China)") &
Attribute_Description %notin% c("Stock/Consumo","Extr. Rate, 999.9999","Yield")) %>%
group_by(Commodity_Description, Attribute_Description, Market_Year) %>%
summarise("Value" = Value / sum(Value) * 100)
View(psdRelativo)
psdRelativo <- psd %>% filter(Country_Name %notin% c("World","World (sin China)") &
Attribute_Description %notin% c("Stock/Consumo","Extr. Rate, 999.9999","Yield")) %>%
group_by(Commodity_Description, Attribute_Description, Market_Year) %>%
summarise("Value" = Value / sum(Value) * 100,
"Country_Name" = Country_Name)
View(psdRelativo)
colnames(psd)
psdRelativo <- psdRelativo %>% mutate("Unit_Description" = "Porcentaje (%)") %>%
select(Commodity_Description,Country_Name,Attribute_Description,Market_Year,Value,Unit_Description)
world <- psdRelativo %>%
group_by(Commodity_Description, Attribute_Description, Market_Year, Unit_Description) %>%
mutate(Country_Name = "World",
Value = 100) %>%
select(Commodity_Description,Country_Name,Attribute_Description,Market_Year,Value,Unit_Description)
View(world)
world <- world %>% group_by(Commodity_Description,Country_Name,Attribute_Description,Market_Year,Unit_Description) %>%
summarise(Value = mean(Value))
psdRelativo <- rbind(psdRelativo,world)
rm(world)
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
datos_salida <- reactive({
if (input$seleccion_tipo_dato == "valores_absolutos") {
if (input$com != "All") {
psd <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psd <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psd <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psd <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
else {
if (input$com != "All") {
psdRelativo <- psdRelativo[psdRelativo$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psdRelativo <- psdRelativo[psdRelativo$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psdRelativo <- psdRelativo[psdRelativo$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psdRelativo <- subset(psdRelativo, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
})
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
datos_salida()
}))
output$Plot <- renderPlotly({
p <- ggplot(datos_salida(), aes(x=Market_Year,y=Value,color=Country_Name))+
geom_line()+
facet_wrap(~Attribute_Description, scales = "free_y") +
theme_bw()
p <- ggplotly(p)
p
})
observeEvent(input$ejecutar, {
session$sendCustomMessage(type = 'testmessage',
message ='Cambios realizados!')
})
output$download <- downloadHandler(
filename = function() {
paste("PSD-USDA ", input$com ," ",DatosAl, ".csv", sep="")
},
content = function(file) {
df <- datos_salida()
write.csv(x = df, file = file,fileEncoding = "UTF-8")
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
psdRelativo = round(psdRelativo$Value, digits = 2)
rm(psdRelativo)
psdRelativo <- psd %>% filter(Country_Name %notin% c("World","World (sin China)") &
Attribute_Description %notin% c("Stock/Consumo","Extr. Rate, 999.9999","Yield")) %>%
group_by(Commodity_Description, Attribute_Description, Market_Year) %>%
summarise("Value" = Value / sum(Value) * 100,
"Country_Name" = Country_Name)
psdRelativo <- psdRelativo %>% mutate("Unit_Description" = "Porcentaje (%)") %>%
select(Commodity_Description,Country_Name,Attribute_Description,Market_Year,Value,Unit_Description)
#agrego mundo
world <- psdRelativo %>%
group_by(Commodity_Description, Attribute_Description, Market_Year, Unit_Description) %>%
mutate(Country_Name = "World",
Value = 100) %>%
select(Commodity_Description,Country_Name,Attribute_Description,Market_Year,Value,Unit_Description)
world <- world %>% group_by(Commodity_Description,Country_Name,Attribute_Description,Market_Year,Unit_Description) %>%
summarise(Value = mean(Value))
#junto y limpio memoria
psdRelativo <- rbind(psdRelativo,world)
rm(world)
psdRelativo$Value = round(psdRelativo$Value, digits = 2)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel(
h2("Visor PSD-USDA")),
h3(paste0("Datos actualizados ",DatosAl)),
# Create a new Row in the UI for selectInputs
fluidRow(
column(3,
selectInput("com",
"Commodity:",
commodity, selected = "Barley")
),
column(3,
selectInput("atr",
"Atributo:",
atributos, selected = c("Production","Imports","Exports","Domestic Consumption","Ending Stocks","Stock/Consumo"),
multiple=TRUE, selectize=TRUE)
),
column(3,
selectInput("pais",
"País:",
paises,
selected = as.character("World"),
multiple=TRUE, selectize=TRUE)
),
column(3,
# Copy the line below to make a slider range
sliderInput("mkty", label = h3("Año Comercial"), min = min(as.numeric(psd$Market_Year)),
max = max(as.numeric(psd$Market_Year)), value = c(min(as.numeric(psd$Market_Year)),max(as.numeric(psd$Market_Year)))
)
)),
tabsetPanel(type = "tabs",
tabPanel("Tabla", DT::dataTableOutput("table")),
tabPanel("Gráficos", shinycssloaders::withSpinner(plotlyOutput("Plot"), type = 5) ),
tabPanel("Configuración",
br(),
br(),
radioButtons(inputId = "seleccion_tipo_dato",label = "Vista de Datos",
choiceValues = c("valores_absolutos","valores_relativos"),
choiceNames = c("Valores absolutos", "Valores relativos al total mundial"),
selected ="valores_absolutos",inline = T),
br(),
br()),
tabPanel("Descarga",br(),br(),br(),downloadButton("download", "Descarga")),br(),br(),br()
),
h5("(*) Unidades de referencia:"),
h6("- Yield: tn/ha"),
h6("- Area Harvested: Mha"),
h6("- Extr. Rate, 999.9999: Porcentaje (%)"),
h6("- Stock/Consumo: Porcentaje (%)"),
h6("- Otras Variables: Mtn")
)
server <- function(input, output) {
datos_salida <- reactive({
if (input$seleccion_tipo_dato == "valores_absolutos") {
if (input$com != "All") {
psd <- psd[psd$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psd <- psd[psd$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psd <- psd[psd$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psd <- subset(psd, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
else {
if (input$com != "All") {
psdRelativo <- psdRelativo[psdRelativo$Commodity_Description == input$com,]
}
if (input$atr != "All") {
psdRelativo <- psdRelativo[psdRelativo$Attribute_Description %in% c(input$atr),]
}
if (input$pais != "All") {
psdRelativo <- psdRelativo[psdRelativo$Country_Name %in% c(input$pais),]
}
if (input$mkty != "All") {
psdRelativo <- subset(psdRelativo, Market_Year >= input$mkty[1] & Market_Year <= input$mkty[2])
}
}
})
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
datos_salida()
}))
output$Plot <- renderPlotly({
p <- ggplot(datos_salida(), aes(x=Market_Year,y=Value,color=Country_Name))+
geom_line()+
facet_wrap(~Attribute_Description, scales = "free_y") +
theme_bw()
p <- ggplotly(p)
p
})
output$download <- downloadHandler(
filename = function() {
paste("PSD-USDA ", input$com ," ",DatosAl, ".csv", sep="")
},
content = function(file) {
df <- datos_salida()
write.csv(x = df, file = file,fileEncoding = "UTF-8")
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
